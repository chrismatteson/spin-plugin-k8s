#!/bin/bash
set -e

help () {
    echo "
A Spin Plugin for Kubernetes

USAGE:
    spin k8s <SUBCOMMAND>

OPTIONS:
    -h, --help       Print help information

SUBCOMMANDS:
    scaffold     Scaffold a new component into an existing application
    build        Build Spin Docker Container
    push         Push Spin Docker Containter to repository
    deploy       Deploy a Spin application to Kubernetes
    getsvc       Display information of deployed service
"
}

helpScaffold () {
    echo "
Creates Dockerfile and deploy.yaml

OPTIONS:
    -h, --help       Print help information
    -o, --override   Override existing Dockerfile and deploy.yaml

USAGE:
    spin k8s scaffold <NAMESPACE>"
}

helpBuild () {
  echo "
Builds Spin Docker Container. Use after scaffolding is in place.
Requires Docker to be installed.

OPTIONS:
    -h, --help       Print help information

USAGE:
    spin k8s build"
}

helpPush () {
  echo "
Pushes Spin Docker Container to repository. Requires Docker to
be installed and proper authentication in place to repository.

OPTIONS:
    -h, --help       Print help information

USAGE:
    spin k8s push"
}

helpDeploy () {
  echo "
Deploys Spin app to Kubernetes cluster. Requires kubectl to be
installed and KUBECONFIG environment variable to be set to valid
kubeconfig file.

OPTIONS:
    -h, --help       Print help information

USAGE:
    spin k8s build <NAMESPACE>"
}

helpGetSvc () {
  echo "
Shows information of deployed service.

OPTIONS:
    -h, --help       Print help information

USAGE:
    spin k8s getsvc"
}

scaffold () {
    for arg in "$@" ; do
        case $arg in
            -h) helpScaffold && exit;;
            --help) helpScaffold && exit;;
            -o) OVERRIDE=true;;
            --override) OVERRIDE=true;;
        esac
    done
    if [ ! -f "./spin.toml" ]; then
        echo "spin.toml not found" && exit
    fi
    NAME=`grep name spin.toml | cut -d'"' -f 2`
    SOURCE=`grep source spin.toml | cut -d'"' -f 2`
    VERSION=`grep ^version spin.toml | cut -d'"' -f 2`
    NAMESPACE=$1
    if [ $# -gt 1 ] && [ -z $OVERRIDE ]; then
        echo "Only one argument expected" && helpScaffold && exit
    elif [ $# -gt 2 ]; then
        echo "Only one argument expected" && helpScaffold && exit
    fi
    if [ -z $NAMESPACE ]; then
        echo "No Docker Namespace defined" && helpScaffold
    else
        if [ -f "./Dockerfile" ] && [ -z $OVERRIDE ]; then
            echo "Dockerfile already exists and override flag is not set"
        else
            cat << EOF > ./Dockerfile
FROM scratch
COPY ./spin.toml ./spin.toml
EOF
        for f in $SOURCE; do
            printf "COPY ./$f ./$f
" >> ./Dockerfile
        done
        echo "Dockerfile Created"
        fi
        if [ -f "./deploy.yaml" ] && [ -z $OVERRIDE ]; then
            echo "deploy.yaml already exists and override flag is not set"
        else
        cat << EOF > ./deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $NAME
spec:
  replicas: 3
  selector:
    matchLabels:
      app: $NAME
  template:
    metadata:
      labels:
        app: $NAME
    spec:
      runtimeClassName: wasmtime-spin
      containers:
        - name: $NAME
          image: $NAMESPACE/$NAME:$VERSION
          command: ["/"]
          imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: $NAME
spec:
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  selector:
    app: $NAME
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $NAME
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: traefik
  rules:
    - http:
        paths:
          - path: /$NAME
            pathType: Prefix
            backend:
              service:
                name: $NAME
                port:
                  number: 80
EOF
            echo "deploy.yaml created"
        fi
    fi
}

build () {
    for arg in "$@" ; do
        case $arg in
            -h) helpBuild && exit;;
            --help) helpBuild && exit;;
            *) echo "No arguments expected" && helpBuild && exit;;
        esac
    done
    NAME=`grep name spin.toml | cut -d'"' -f 2`
    # Trimming fails for names shorter than 5 characters
    if [ ${#NAME} -lt 5 ]; then
        echo "Spin app name must be at least five characters to use k8s plugin"
        exit 1
    fi
    VERSION=`grep ^version spin.toml | cut -d'"' -f 2`
    TRIM=$((${#NAME} + ${#VERSION} + 3))
    NAMESPACE=`grep image deploy.yaml | cut -d' ' -f 12 | rev | cut -c$TRIM- | rev`
    docker buildx build --provenance=false --platform=wasi/wasm -t $NAMESPACE/$NAME .
    docker tag $NAMESPACE/$NAME:latest $NAMESPACE/$NAME:$VERSION
    echo "Image built"
}

push () {
    for arg in "$@" ; do
        case $arg in
            -h) helpPush && exit;;
            --help) helpPush && exit;;
        esac
    done
    NAME=`grep name spin.toml | cut -d'"' -f 2`
    VERSION=`grep ^version spin.toml | cut -d'"' -f 2`
    TRIM=$((${#NAME} + ${#VERSION} + 3))
    NAMESPACE=`grep image deploy.yaml | cut -d' ' -f 12 | rev | cut -c$TRIM- | rev`
    echo "$NAMESPACE/$NAME:$VERSION"
    docker push $NAMESPACE/$NAME:latest
    docker push $NAMESPACE/$NAME:$VERSION
    echo "Image pushed"
}

deploy () {
    for arg in "$@" ; do
        case $arg in
            -h) helpDeploy && exit;;
            --help) helpDeploy && exit;;
            *) echo "No arguments expected" && helpDeploy && exit;;
        esac
    done
    kubectl apply -f deploy.yaml
}

getsvc () {
    for arg in "$@" ; do
        case $arg in
            -h) helpGetSvc && exit;;
            --help) helpGetSvc && exit;;
            *) echo "No arguments expected" && helpGetSvc && exit;;
        esac
    done
    NAME=`grep name spin.toml | cut -d'"' -f 2`
    kubectl get svc $NAME
}

case "$1" in
    "") help;;
    -h) help;;
    --help) help;;
    scaffold) shift && scaffold $@;;
    build) shift && build $@;;
    push) shift && push $@;;
    deploy) shift && deploy $@;;
    getsvc) shift && getsvc $@;;
    *) echo "Command not understood" && help;;
esac